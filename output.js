// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  "use strict";

  // module Projections

  exports.when = function(eventname) {
    return function(eventhandler){
      var obj = {};
      obj[eventname] = function(state, event) {
        return eventhandler(state)(event);
      }
      return obj;
    };
  };

  var merge_objects = function (obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
  }

  exports.foreignAppend = function(folderA){
    return function(folderB){
      return merge_objects(folderA, folderB);
    }
  }


  exports.runProjection = function(eventSource){
    return function(initialState){
      return function(folder){
        var handlers = merge_objects({$init: function(){return initialState;}},folder);
        return function() {
          if(exports.FromStream != undefined && eventSource instanceof exports.FromStream){
            fromStream(eventSource.value0).when(handlers);
          } else {
            fromAll().when(handlers)
          }
        }
      }
    }
  }
 
})(PS["Projections"] = PS["Projections"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Projections"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var FromAll = (function () {
      function FromAll() {

      };
      FromAll.value = new FromAll();
      return FromAll;
  })();
  var fromAll = FromAll.value;
  exports["FromAll"] = FromAll;
  exports["fromAll"] = fromAll;
  exports["foreignAppend"] = $foreign.foreignAppend;
  exports["when"] = $foreign.when;
  exports["runProjection"] = $foreign.runProjection;;
 
})(PS["Projections"] = PS["Projections"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Projections = PS["Projections"];     
  var handlerB = function (s) {
      return function (e) {
          return {
              count: s.count + 1 | 0
          };
      };
  };
  var handlerA = function (s) {
      return function (e) {
          return {
              count: s.count + 1 | 0
          };
      };
  };
  var main = Projections.runProjection(Projections.fromAll)({
      count: 0
  })(Projections.foreignAppend(Projections.when("$statsCollected")(handlerA))(Projections.when("Figo")(handlerB)));
  exports["main"] = main;
  exports["handlerB"] = handlerB;
  exports["handlerA"] = handlerA;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
