// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  exports["Semigroup"] = Semigroup;
  exports["<>"] = $less$greater;
  exports["append"] = append;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  "use strict";

  // module Projections

  exports.when = function(eventname) {
    return function(eventhandler){
      var obj = {};
      obj[eventname] = function(state, event) {
        return eventhandler(state)(event);
      }
      return obj;
    };
  };

  exports.foreignAppend = function(folderA){
    return function(folderB){
      return mergeObjects(folderA, folderB);
    }
  }

  exports.runProjection = function(eventSource){
    return function(initialState){
      return function(folder){
        var handlers = mergeObjects({$init: function(){return initialState;}},folder);
        return function() {
          getEventsource(eventSource).when(handlers);
        }
      }
    }
  }

  var getEventsource = function (eventsource) {
    if(isEventsourcetype(eventSource, exports.FromStream)){
      return fromStream(eventSource.value0);
    } else if(isEventsourcetype(eventSource, exports.ForEachInCategory)){
      return fromCategory(eventSource.value0).foreachStream();
    } 
    return fromAll().when(handlers);
  }

  var mergeObjects = function (obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
  }

  var isEventsourcetype = function(eventsource, expectedType) {
    return eventSource != undefined && eventSource instanceof expectedType;
  }
 
})(PS["Projections"] = PS["Projections"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Projections"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var FromStream = (function () {
      function FromStream(value0) {
          this.value0 = value0;
      };
      FromStream.create = function (value0) {
          return new FromStream(value0);
      };
      return FromStream;
  })();
  var FromAll = (function () {
      function FromAll() {

      };
      FromAll.value = new FromAll();
      return FromAll;
  })();
  var ForEachInCategory = (function () {
      function ForEachInCategory(value0) {
          this.value0 = value0;
      };
      ForEachInCategory.create = function (value0) {
          return new ForEachInCategory(value0);
      };
      return ForEachInCategory;
  })();
  var semigroupFoldE = new Prelude.Semigroup($foreign.foreignAppend);
  var fromStream = function (streamname) {
      return new FromStream(streamname);
  };
  var fromAll = FromAll.value;
  var forEachInCategory = function (category) {
      return new ForEachInCategory(category);
  };
  exports["FromStream"] = FromStream;
  exports["FromAll"] = FromAll;
  exports["ForEachInCategory"] = ForEachInCategory;
  exports["forEachInCategory"] = forEachInCategory;
  exports["fromAll"] = fromAll;
  exports["fromStream"] = fromStream;
  exports["semigroupFoldE"] = semigroupFoldE;
  exports["when"] = $foreign.when;
  exports["runProjection"] = $foreign.runProjection;;
 
})(PS["Projections"] = PS["Projections"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Projections = PS["Projections"];     
  var handlerB = function (s) {
      return function (e) {
          return {
              count: s.count + 1 | 0
          };
      };
  };
  var handlerA = function (s) {
      return function (e) {
          return {
              count: s.count + 1 | 0
          };
      };
  };
  var fromStreamProjections = Projections.runProjection(Projections.fromStream("figo"))({
      count: 0
  })(Prelude["<>"](Projections.semigroupFoldE)(Projections.when("$statsCollected")(handlerA))(Projections.when("Figo")(handlerB)));
  var fromAllProjections = Projections.runProjection(Projections.fromAll)({
      count: 0
  })(Prelude["<>"](Projections.semigroupFoldE)(Projections.when("$statsCollected")(handlerA))(Projections.when("Figo")(handlerB)));
  var main = fromAllProjections;
  var forEachInCategoryProjections = Projections.runProjection(Projections.forEachInCategory("figo"))({
      count: 0
  })(Prelude["<>"](Projections.semigroupFoldE)(Projections.when("$statsCollected")(handlerA))(Projections.when("Figo")(handlerB)));
  exports["main"] = main;
  exports["forEachInCategoryProjections"] = forEachInCategoryProjections;
  exports["fromStreamProjections"] = fromStreamProjections;
  exports["fromAllProjections"] = fromAllProjections;
  exports["handlerB"] = handlerB;
  exports["handlerA"] = handlerA;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
