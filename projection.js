// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  // module Projections

  exports.when = function(eventname) {
    return function(eventhandler){
      var obj = {};
      obj[eventname] = function(state, event) {
        return eventhandler(state)(event);
      };
      return obj;
    };
  };

  exports.whenAny = function(eventhandler) {
    return {$any : function(s,e) {
      return eventhandler(s)(e);
    }};
  };

  exports.runProjection = function(eventSource){
    return function(initialState){
      return function(opts){
        return function(folder){
          var handlers = mergeObjects({$init: function(){return initialState;}},folder);
          options(getOptions(opts,eventsource))
          return function() {
            var proj = getEventsource(eventSource).when(handlers);
            if(shouldOutputState(opts)){
              proj.outputState();
            }
          };
        };
      };
    };
  };

  var getOptions = function(opts, eventsource){
    if(isEventsourcetype(eventsource, exports.FromStreams)){
      return {
        resultStreamName: opts.resultStreamName,
        reorderEvents: eventsource.value0.reorderEvents,
        processingLag: eventsource.value0.processingLag 
      };
    }
    return {resultStreamName: opts.resultStreamName}
  }

  var shouldOutputState = function(opts){
    return opts.outputState;
  };

  var getEventsource = function (eventSource) {
    if(isEventsourcetype(eventSource, exports.FromStream)){
      return fromStream(eventSource.value0);
    } else if(isEventsourcetype(eventSource, exports.FromStreams)){
      return fromStreams(eventSource.value1);
    } else if(isEventsourcetype(eventSource, exports.ForEachInCategory)){
      return fromCategory(eventSource.value0).foreachStream();
    } else if(isEventsourcetype(eventSource, exports.FromCategory)){
      return fromCategory(eventSource.value0);
    } else if(isEventsourcetype(eventSource, exports.ForEach)){
      return fromAll().foreachStream();
    } 
    return fromAll();
  };

  var mergeObjects = function (obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname2 in obj2) { obj3[attrname2] = obj2[attrname2]; }
    return obj3;
  };

  var isEventsourcetype = function(eventsource, expectedType) {
    return eventsource !== undefined && expectedType !== undefined && eventsource instanceof expectedType;
  };
})(PS["Projections"] = PS["Projections"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Projections"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var FromStream = (function () {
      function FromStream(value0) {
          this.value0 = value0;
      };
      FromStream.create = function (value0) {
          return new FromStream(value0);
      };
      return FromStream;
  })();
  var FromAll = (function () {
      function FromAll() {

      };
      FromAll.value = new FromAll();
      return FromAll;
  })();
  var FromCategory = (function () {
      function FromCategory(value0) {
          this.value0 = value0;
      };
      FromCategory.create = function (value0) {
          return new FromCategory(value0);
      };
      return FromCategory;
  })();
  var FromStreams = (function () {
      function FromStreams(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FromStreams.create = function (value0) {
          return function (value1) {
              return new FromStreams(value0, value1);
          };
      };
      return FromStreams;
  })();                                                                     
  var outputState = function (streamname) {
      return {
          resultStreamName: streamname,
          outputState: true
      };
  };
  var fromStreams = function (streams) {
      return new FromStreams({
          processingLag: 500,
          reorderEvents: false
      }, streams);
  };
  var fromStream = function (streamname) {
      return new FromStream(streamname);
  };
  var fromCategory = function (category) {
      return new FromCategory(category);
  };
  var fromAll = FromAll.value;
  var defaultOptions = {
      resultStreamName: "",
      outputState: false
  };
  exports["FromStream"] = FromStream;
  exports["FromAll"] = FromAll;
  exports["FromCategory"] = FromCategory;
  exports["FromStreams"] = FromStreams;
  exports["outputState"] = outputState;
  exports["fromStream"] = fromStream;
  exports["fromAll"] = fromAll;
  exports["defaultOptions"] = defaultOptions;
  exports["fromCategory"] = fromCategory;
  exports["fromStreams"] = fromStreams;
  exports["runProjection"] = $foreign.runProjection;
  exports["when"] = $foreign.when;
  exports["whenAny"] = $foreign.whenAny;
})(PS["Projections"] = PS["Projections"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var Projections = PS["Projections"];        
  var handlerB = function (s) {
      return function (e) {
          return {
              count: s.count + 1 | 0
          };
      };
  };
  var handlerA = function (s) {
      return function (e) {
          return {
              count: s.count + 1 | 0
          };
      };
  };
  var outputStateProjection = Projections.runProjection(Projections.fromAll)({
      count: 0
  })(Projections.outputState("Zustand"))(Projections.whenAny(handlerA));
  var main = outputStateProjection;
  var whenAnyEvent = Projections.runProjection(Projections.fromAll)({
      count: 0
  })(Projections.defaultOptions)(Projections.whenAny(handlerA));
  var fromStreamsProjections = Projections.runProjection(Projections.fromStreams([ "$stats-127.0.0.1:2113", "$projections-$master" ]))({
      count: 0
  })(Projections.defaultOptions)(Projections.when("$statsCollected")(handlerA));
  var fromStreamProjections = Projections.runProjection(Projections.fromStream("$stats-127.0.0.1:2113"))({
      count: 0
  })(Projections.defaultOptions)(Projections.when("$statsCollected")(handlerA));
  var fromAllProjections = Projections.runProjection(Projections.fromAll)({
      count: 0
  })(Projections.defaultOptions)(Projections.when("$statsCollected")(handlerA));
  var forEachInCategoryProjections = Projections.runProjection(Projections.fromCategory("$stats"))({
      count: 0
  })(Projections.defaultOptions)(Projections.when("$statsCollected")(handlerA));
  exports["handlerA"] = handlerA;
  exports["handlerB"] = handlerB;
  exports["fromAllProjections"] = fromAllProjections;
  exports["fromStreamProjections"] = fromStreamProjections;
  exports["forEachInCategoryProjections"] = forEachInCategoryProjections;
  exports["fromStreamsProjections"] = fromStreamsProjections;
  exports["whenAnyEvent"] = whenAnyEvent;
  exports["outputStateProjection"] = outputStateProjection;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
